<html>
<head>
<title>Stalker</title>
<style>
* {
background-color: black;
color: white;
}
table {
	border: 1px outset grey;
}
td { 
	border: thin inset grey;
	margin: 1;
}
.nr {
	text-align: right;
}
</style>
<script>
const settings = {
  system : {
    fullname: 'config/system.ltx',
	section: {
      inventory: {
        take_dist: 2,
        max_weight: 80,
        max_belt: 80,
        max_ruck: 56,
        slots: 11 
	  }
	}
  },
  actor: {
	fullname: 'config/creatures/actor.ltx',
	section: {
	  actor_condition: {
        max_walk_weight: 80
	  },
      actor: {
	    max_item_mass: 80,
	    jump_speed: 1
	  }
	}
  }
}
function readJsonLtxSections(fileName = 'config/misc/task_manager.ltx') {
  const body = JSON.stringify({
	path : basePath.value,
	fileName
  })
  return fetch(`${baseUrl.value}/readJsonLtxSections`, { method: 'POST', body })
	.then(response => response.json())
}
function readXmlTexts(fileName) {
  const body = JSON.stringify({
	path : basePath.value,
	fileName
  })
  return fetch(`${baseUrl.value}/readXmlTexts`, { method: 'POST', body })
	.then(response => response.json())
}
function updateSectionSetting(body) {
  fetch(`${baseUrl.value}/updateLtxSectionSetting`, { method: 'POST', body: JSON.stringify(body) })
	.then(response => response.text())
	.then(txt => console.log({updateSectionSetting: txt}))
}
function addToCell(cell, txt, translation) {
  if (txt.indexOf(',') == -1) return insertDetails(cell, txt, translation)
  const parts = txt.split(',')
  if (parts.length == 2) return cell.innerText = txt
  return insertDetails(cell, parts[0], txt)
  //cell.innerHTML = ''
  //const select = cell.appendChild(document.createElement('select'))
  //txt.split(',').forEach(val => addValues(select, val))
  //return txt
}
function addValues(select, val)  {
  const option = select.appendChild(document.createElement('option'))
  option.innerText = val
}
function insertSetting(table, setting, section) {
  Object.keys(setting.section)
    .forEach(sectionKey => {
	  Object.keys(setting.section[sectionKey])
	    .forEach(settingKey => {
		  const sx = section[sectionKey]
          const row = table.insertRow(-1)
          row.insertCell().innerText = setting.fullname
          row.insertCell(-1).innerText = sectionKey
          row.insertCell(-1).innerText = settingKey
	      const valueCell = row.insertCell(-1)
		  valueCell.innerText = sx[settingKey]
	      valueCell.setAttribute('contenteditable', true)
		  valueCell.onblur = e => updateSectionSetting({
              path : basePath.value,
              fileName : setting.fullname,
              section : sectionKey,
              setting : settingKey,
			  newValue: valueCell.innerText,
			  oldValue: valueCell.getAttribute('data-value')
            })
	      if (typeof(sx[settingKey]) == 'number')
            valueCell.classList.add('nr')
		})
    })
}
function insertSection(table, section, translation, headerCells) {
  const row = table.insertRow(-1)
  const cell = row.insertCell(-1)
  insertDetails(cell, section, translation)
  for (var i = 1; i < headerCells; i++)
    row.insertCell(-1)
}

function insertDetails(container, title, content) {
  if (!content) return container.innerText = title
  const details = container.appendChild(document.createElement('details'))
  details.appendChild(document.createElement('summary')).innerText = title
  details.appendChild(document.createElement('p')).innerText = content
}

setTimeout(() => {
  readXmlTexts('config/text/eng/string_table_enc_weapons.xml')
    .then(weaponTexts => readJsonLtxSections('config/misc/unique_items.ltx')
      .then(uniqueItemsSections => readJsonLtxSections('config/misc/artefacts.ltx')
        .then(artefactSections => readXmlTexts('config/text/eng/string_table_enc_zone.xml')
          .then(zoneTexts => readXmlTexts('config/text/eng/stable_task_manager.xml')
	        .then(texts => readJsonLtxSections('config/misc/task_manager.ltx')
	          .then(sections => {
                const sectionTable = document.querySelector('table[name="section"]')
	            const headerCells = sectionTable.rows[0].cells.length
	            const settingProps = Array.from(sectionTable.rows[0].cells).slice(1).map(cell => cell.innerText)
	            const getTrans = val => texts.string_table[val]?.text || 
	      	        zoneTexts.string_table[artefactSections[val]?.inv_name]?.text ||
					weaponTexts.string_table[uniqueItemsSections[val]?.inv_name]?.text
	            const propTxt = (s, k, p) => getTrans(s[k][p])
	            Object.keys(sections)
	              .filter(key => sections[key].type != 'storyline')
                  .sort()
                  .forEach(key => {
	          	  insertSection(sectionTable, key, getTrans(key), headerCells)
	          	  const row = sectionTable.rows[sectionTable.rows.length - 1]
	            	  settingProps.forEach((prop, i) => addToCell(row.cells[1 + i], sections[key][prop] || '', propTxt(sections, key, prop)))
	          	})
	          })
	        )
	      )
	    )
	  )
	)
	
  baseUrl.value = document.URL.split('/').slice(0, -1).join('/')
  const settingsTable = document.querySelector('table[name="setting"]')
  Object.keys(settings)
    .forEach(key => readJsonLtxSections(settings[key].fullname)
      .then(sections => insertSetting(settingsTable, settings[key], sections))
	)
})
</script>
</head>
<body>
<h1>Stalker</h1>
<div>
<label>Basepath: <input type="text" id="basePath" value="d:/games/node/stalker-shoc/gamedata"></label>
<br/>
<label>BaseUrl: <input type="text" id="baseUrl" value=""></label>
</div>

<table name="setting">
<tr><th>Filename</th><th>Section</th><th>Setting</th><th>Value</th></tr>
</table>

<table name="section" file="config/misc/task_manager.ltx" texts="config/text/eng/stable_task_manager.xml">
<tr><th>Quest</th><th>reward_item</th><th>reward_money</th><th>description</th><th>text</th><th>reward_relation</th></tr>
</table>

</body>
</html>